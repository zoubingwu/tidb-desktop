name: Release

on:
  # Trigger when a tag starting with 'v' is pushed
  push:
    tags:
      - 'v*'
  # Allow manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v0.1.0)'
        required: true

jobs:
  release:
    name: Release macOS
    runs-on: macos-latest
    permissions:
      contents: write # Needed for actions/create-release

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for commit hash

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: go.sum

      - name: Install Go dependencies
        run: go mod tidy

      # Install Wails CLI
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10

      # Setup Node.js and pnpm for frontend build
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.0 # Make sure this matches your project if needed

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Make sure this matches your project if needed
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile # Use --frozen-lockfile for CI
        working-directory: ./frontend

      # Determine version and commit hash
      - name: Get Version and Commit
        id: vars
        run: |
          # Use tag from workflow_dispatch input if present, otherwise use github.ref_name (pushed tag)
          TAG=${{ github.event.inputs.tag || github.ref_name }}
          # Strip 'v' prefix if it exists for clean version number (optional, adjust based on your main.go expectation)
          VERSION=${TAG#v}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get Previous Tag
        id: prev_tag
        run: |
          # Get the latest tag before the current one
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^^ 2>/dev/null || echo "")
          # If no previous tag is found (e.g., first release), set an empty string or a specific message
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, this might be the first release."
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD) # Fallback to initial commit if no previous tag
          fi
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "Resolved previous tag: ${PREVIOUS_TAG}"
        shell: bash

      - name: Get Existing Release URL
        # Tries to get the upload URL for an existing release matching the tag.
        # If this fails (e.g., release doesn't exist), the step fails but the workflow continues.
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ steps.vars.outputs.tag }}'
              });
              console.log(`Found existing release for tag ${{ steps.vars.outputs.tag }}`);
              core.setOutput('upload_url', release.data.upload_url);
              return true; // Indicate success
            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release found for tag ${{ steps.vars.outputs.tag }}.`);
                core.setOutput('upload_url', '');
                return false; // Indicate failure (release not found)
              } else {
                core.setFailed(`Error getting release by tag: ${error.message}`);
                return false;
              }
            }
          result-encoding: string # Explicitly state we want the boolean return as string 'true'/'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        # Only run if the previous step failed to find an existing release
        if: steps.get_release.outputs.result == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: Release ${{ steps.vars.outputs.tag }}
          body: |
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.prev_tag.outputs.previous_tag }}...${{ steps.vars.outputs.tag }}

            **Commit SHA:** ${{ steps.vars.outputs.commit_hash }}
          draft: false
          prerelease: false

      - name: Build Wails app for macOS
        run: |
          echo "Building version ${{ steps.vars.outputs.version }} (${{ steps.vars.outputs.commit_hash }})"
          # Note: Using steps.vars.outputs.version here (without 'v')
          wails build -platform=darwin/universal \
                      -ldflags="-s -w -X main.version=${{ steps.vars.outputs.version }} -X main.commitHash=${{ steps.vars.outputs.commit_hash }}" \
                      -trimpath
        env:
          CGO_ENABLED: 1

      - name: Zip macOS Artifact
        run: |
          cd "build/bin"
          zip -r "TiDB Desktop.app.zip" "TiDB Desktop.app"
        shell: bash

      - name: Upload macOS Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Use URL from create_release if it ran, otherwise use URL from get_release
          upload_url: ${{ steps.create_release.outputs.upload_url || steps.get_release.outputs.upload_url }}
          asset_path: ./build/bin/TiDB Desktop.app.zip
          asset_name: TiDB-Desktop-${{ steps.vars.outputs.tag }}-macos-universal.app.zip # Use tag in asset name
          asset_content_type: application/zip
